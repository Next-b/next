var formatter = require('../base64-format');

var testString = "DIwNDUgIH/5ZWFyPSAxOTk2IHxtb250aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkYXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY+PHJlZiB+YW1lPSJyZmMgMzU0OCI+e3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlNjQgRGF0YSBFbmN/ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250aD0gS/seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3JjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cmVmIG5hbWU9ImF1dG9nZW5lcmF0+ZWQyMDA2I/8+D/o=";


/*
	Test formats
*/

exports.base64 = function(beforeExit, assert) {
	var format = "base64";
	var expect = testString;
	var resultA = formatter (testString, { to: format });
	var resultB = formatter (resultA, { from: format });
	assert.equal(expect, resultA); // default -> format
	assert.equal(testString, resultB); // format -> default
};

exports.base64_64 = function(beforeExit, assert) {
	var format = "base64_64";
	var expect = "DIwNDUgIH/5ZWFyPSAxOTk2IHxtb250aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW\r\n0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkY\r\nXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY+PHJlZiB+YW1lPSJyZmMgMzU0OCI+e\r\n3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlN\r\njQgRGF0YSBFbmN/ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250a\r\nD0gS/seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3\r\nJjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cm\r\nVmIG5hbWU9ImF1dG9nZW5lcmF0+ZWQyMDA2I/8+D/o=";
	var resultA = formatter (testString, { to: format });
	var resultB = formatter (resultA, { from: format });
	assert.equal(expect, resultA); // default -> format
	assert.equal(testString, resultB); // format -> default
};

exports.base64_76 = function(beforeExit, assert) {
	var format = "base64_76";
	var expect = "DIwNDUgIH/5ZWFyPSAxOTk2IHxtb250aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW0ludGVybmV0I\r\nEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkYXRlPSBNYXJjaCAxOCwgMjAxM\r\nH19PC9yZWY+PHJlZiB+YW1lPSJyZmMgMzU0OCI+e3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZ\r\nTE2LCBCYXNlMzIsIGFuZCBCYXNlNjQgRGF0YSBFbmN/ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyP\r\nSAyMDAzIHxtb250aD0gS/seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzay\r\nBGb3JjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cmVmIG5hbW\r\nU9ImF1dG9nZW5lcmF0+ZWQyMDA2I/8+D/o=";
	var resultA = formatter (testString, { to: format });
	var resultB = formatter (resultA, { from: format });
	assert.equal(expect, resultA); // default -> format
	assert.equal(testString, resultB); // format -> default
};

exports.rfc4648 = function(beforeExit, assert) {
	var format = "rfc4648";
	var expect = "DIwNDUgIH_5ZWFyPSAxOTk2IHxtb250aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkYXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY-PHJlZiB-YW1lPSJyZmMgMzU0OCI-e3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlNjQgRGF0YSBFbmN_ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250aD0gS_seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3JjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cmVmIG5hbWU9ImF1dG9nZW5lcmF0-ZWQyMDA2I_8-D_o.";
	var resultA = formatter (testString, { to: format });
	var resultB = formatter (resultA, { from: format });
	assert.equal(expect, resultA); // default -> format
	assert.equal(testString, resultB); // format -> default
};

exports.rfc4648_alt = function(beforeExit, assert) {
	var format = "rfc4648_alt";
	var expect = "DIwNDUgIH_5ZWFyPSAxOTk2IHxtb250aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkYXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY-PHJlZiB-YW1lPSJyZmMgMzU0OCI-e3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlNjQgRGF0YSBFbmN_ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250aD0gS_seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3JjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cmVmIG5hbWU9ImF1dG9nZW5lcmF0-ZWQyMDA2I_8-D_o=";
	var resultA = formatter (testString, { to: format });
	var resultB = formatter (resultA, { from: format });
	assert.equal(expect, resultA); // default -> format
	assert.equal(testString, resultB); // format -> default
};

exports.y64 = function(beforeExit, assert) {
	var format = "y64";
	var expect = "DIwNDUgIH_5ZWFyPSAxOTk2IHxtb250aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkYXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY.PHJlZiB.YW1lPSJyZmMgMzU0OCI.e3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlNjQgRGF0YSBFbmN_ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250aD0gS_seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3JjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cmVmIG5hbWU9ImF1dG9nZW5lcmF0.ZWQyMDA2I_8.D_o-";
	var resultA = formatter (testString, { to: format });
	var resultB = formatter (resultA, { from: format });
	assert.equal(expect, resultA); // default -> format
	assert.equal(testString, resultB); // format -> default
};

exports.xml = function(beforeExit, assert) {
	var format = "xml";
	var expect = "DIwNDUgIH.5ZWFyPSAxOTk2IHxtb250aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkYXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY_PHJlZiB_YW1lPSJyZmMgMzU0OCI_e3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlNjQgRGF0YSBFbmN.ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250aD0gS.seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3JjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cmVmIG5hbWU9ImF1dG9nZW5lcmF0_ZWQyMDA2I.8_D.o";
	var testStringAfterXml = "DIwNDUgIH/5ZWFyPSAxOTk2IHxtb250aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkYXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY+PHJlZiB+YW1lPSJyZmMgMzU0OCI+e3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlNjQgRGF0YSBFbmN/ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250aD0gS/seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3JjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cmVmIG5hbWU9ImF1dG9nZW5lcmF0+ZWQyMDA2I/8+D/o";
	var resultA = formatter (testString, { to: format });
	var resultB = formatter (resultA, { from: format });
	assert.equal(expect, resultA); // default -> format
	assert.equal(testStringAfterXml, resultB); // format -> default, minus padding chars

};


/*
	Test other
*/

exports.functional = function(beforeExit, assert) {
	var format = "base64_64";
	var expect = "DIwNDUgIH/5ZWFyPSAxOTk2IHxtb250aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW\r\n0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkY\r\nXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY+PHJlZiB+YW1lPSJyZmMgMzU0OCI+e\r\n3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlN\r\njQgRGF0YSBFbmN/ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250a\r\nD0gS/seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3\r\nJjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cm\r\nVmIG5hbWU9ImF1dG9nZW5lcmF0+ZWQyMDA2I/8+D/o=";
	var resultA = formatter.functional({ data: expect, to: format });
	var resultB = formatter.functional({ data: expect, to: format, swapFromAndTo: false });
	// Check data is set
	assert.equal(expect, resultA.data);
	// Check to/from are swapped
	assert.equal(format, resultA.from);
	assert.equal("base64", resultA.to);
	// Check to/from aren't swapped
	assert.equal(format, resultB.to);
	assert.equal("base64", resultB.from);
}

exports.parse = function(beforeExit, assert) {
	var format = "base64_64";
	var expect = "DIwNDUgIH/5ZWFyPSAxOTk2IHxtb250aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW\r\n0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkY\r\nXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY+PHJlZiB+YW1lPSJyZmMgMzU0OCI+e\r\n3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlN\r\njQgRGF0YSBFbmN/ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250a\r\nD0gS/seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3\r\nJjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cm\r\nVmIG5hbWU9ImF1dG9nZW5lcmF0+ZWQyMDA2I/8+D/o=";
	var data = "!@#$ 	~\tDIwNDUgIH/5ZWFyPSAxOTk2IHxtb250aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW\r\n0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkY\r\nXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY+PHJlZiB+YW1lPSJyZmMgMzU0OCI+e\r\n3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlN\r\njQgRGF0YSBFbmN/ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250a\r\nD0gS/seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3\r\nJjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cm\r\nVmIG5hbWU9ImF1dG9nZW5lcmF0+ZWQyMDA2I/8+D/o=";
	// Parse & convert to base64
	var resultA = formatter (data, { from: format });
	// Parse & convert to base64_64
	var resultB = formatter (data, { from: format, to: format });
	assert.equal(testString, resultA);
	assert.equal(expect, resultB);
}

exports.dontParse = function(beforeExit, assert) {
	var format = "base64_64";
	var data = "DIw@#$%&*&*()!~`[]}{;':,./<>?50aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW\r\n0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkY\r\nXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY+PHJlZiB+YW1lPSJyZmMgMzU0OCI+e\r\n3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlN\r\njQgRGF0YSBFbmN/ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250a\r\nD0gS/seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3\r\nJjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cm\r\nVmIG5hbWU9ImF1dG9nZW5lcmF0+ZWQyMDA2I/8+D/o=";
	var expect = "DIw@#$%&*&*()!~`[]}{;':,./<>?50aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkYXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY+PHJlZiB+YW1lPSJyZmMgMzU0OCI+e3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlNjQgRGF0YSBFbmN/ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250aD0gS/seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3JjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cmVmIG5hbWU9ImF1dG9nZW5lcmF0+ZWQyMDA2I/8+D/o=";
	var resultA = formatter (data, { from: format, to: format, parse: false });
	var resultB = formatter (data, { from: format,  parse: false });
	assert.equal(data, resultA);
	assert.equal(expect, resultB);
}

exports.defaults = function(beforeExit, assert) {
	var format = "base64_64";
	var expect = "DIwNDUgIH/5ZWFyPSAxOTk2IHxtb250aD0gTm92ZW1iZXIgfHB1Ymxpc2hlcj1bW\r\n0ludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2V8SUVURl1dIHxhY2Nlc3NkY\r\nXRlPSBNYXJjaCAxOCwgMjAxMH19PC9yZWY+PHJlZiB+YW1lPSJyZmMgMzU0OCI+e\r\n3tjaXRlIElFVEYgfHRpdGxlPSBUaGUgQmFzZTE2LCBCYXNlMzIsIGFuZCBCYXNlN\r\njQgRGF0YSBFbmN/ZGluZ3MgfCByZmM9IDM1NDggIHx5ZWFyPSAyMDAzIHxtb250a\r\nD0gS/seSB8cHVibGlzaGVyPVtbSW50ZXJuZXQgRW5naW5lZXJpbmcgVGFzayBGb3\r\nJjZXxJRVRGXV0gfGFjY2Vzc2RhdGU9IE1hcmNoIDE4LCAyMDEwfX08L3JlZj48cm\r\nVmIG5hbWU9ImF1dG9nZW5lcmF0+ZWQyMDA2I/8+D/o=";
	var result = formatter.defaults({ to: format })(testString);
	assert.equal(expect, result);
}
